#! /usr/bin/env bash
set -euo pipefail

base="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../../.." && pwd )"
repo="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../.." && pwd )"

script_name="$(basename "${BASH_SOURCE[0]}")"
usage_and_exit() {
  local message=${1:-}
  if [ -n "${message}" ]; then
    echo "error: ${message}"
  fi
  cat <<EOF
Usage: $script_name [tile-name]
Examples:
  $script_name pcf
  $script_name redis
EOF
  exit 1
}

tile=${1:-}
if [ -z "${tile}" ]; then
  usage_and_exit
fi

config="${base}/bosh-secrets/pcf/upgrade-${tile}-params.yml"
if [ ! -f "${config}" ]; then
  usage_and_exit "no such file: ${config}"
fi

# make sure we have pcf-pipelines
if [[ ! -d "${repo}/tmp/pcf-pipelines" ]] ; then
  pushd ${repo}/tmp > /dev/null
    git clone https://github.com/pivotal-cf/pcf-pipelines.git &> /dev/null
  popd > /dev/null
fi

# checkout specific version of pcf-pipelines
REF="eb519a3fd094d2da7eca9eb633292ef5e9fa79bd" #v0.23.1
echo "Checking out to pcf-pipelines to ref: ${REF}"

pushd ${repo}/tmp/pcf-pipelines > /dev/null
  git fetch &> /dev/null
  git checkout ${REF} &> /dev/null
  git log -1 --pretty=oneline
popd > /dev/null

cat "${repo}/tmp/pcf-pipelines/upgrade-tile/pipeline.yml" \
    | yaml-patch -o "${repo}/pcf/ops-files/upgrade-tile.yml" \
    > "${repo}/pcf/upgrade-tile-pipeline.yml"

fly -t prod set-pipeline \
    -p "upgrade-${tile}" \
    -c "${repo}/pcf/upgrade-tile-pipeline.yml" \
    -l "${config}"

#! /usr/bin/env bash
set -euo pipefail

# Usage:
#
# To generate a manifest with variable interpolation placeholders intact,
# suitable to be committed to source control:
#
#   $ ./bin/interpolate
#
# To generate a manifest with variable interpolated into the manifest,
# suitable for `bosh create-env`, but NOT to be committed:
#
#   $ ./bin/interpolate --vars-file <path> --vars-store <path>

base="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../../.." && pwd )"
repo="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../.." && pwd )"

# make sure we have bosh-deployment
if [[ ! -d "${base}/bosh-deployment" ]] ; then
  pushd ${base} > /dev/null
    git clone https://github.com/cloudfoundry/bosh-deployment.git &> /dev/null
  popd > /dev/null
fi

# checkout specific version of bosh-deployment
echo "Checking out to bosh-deployment commit:"
pushd ${base}/bosh-deployment > /dev/null
  git fetch &> /dev/null
  git checkout 495e6f5b74f903dab8ba24f14d805a21060fdb41 &> /dev/null
  git log -1 --pretty=oneline
popd > /dev/null

bosh interpolate "${base}/bosh-deployment/bosh.yml" \
  -o "${base}/bosh-deployment/vsphere/cpi.yml" \
  -o "${base}/bosh-deployment/jumpbox-user.yml" \
  -o "${base}/bosh-deployment/uaa.yml" \
  -o "${base}/bosh-deployment/credhub.yml" \
  -o "${base}/bosh-deployment/misc/dns.yml" \
  -o "${repo}/environment/ops-files/bosh.yml" \
   > "${repo}/environment/bosh.yml"

echo "Finished generating manifest: ${repo}/environment/bosh.yml"

bosh interpolate "${repo}/environment/templates/cloud-config.yml" \
  -o "${base}/bosh-deployment/misc/dns.yml" \
  > "${repo}/environment/cloud-config.yml"

echo "Finished generating cloud config: ${repo}/environment/cloud-config.yml"
